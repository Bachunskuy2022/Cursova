import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ManagerDashboard.css';
import { useNavigate } from 'react-router-dom';
import ExportData from './ExportData';

const formatDate = (isoString) => {
  if (!isoString) return '‚Äî';
  const date = new Date(isoString);
  return date.toLocaleString('sv-SE', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  }).replace(' ', ' ');
};

const validateDriver = ({ name, surname, email, phoneNumber }) => {
  const nameRegex = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ]+$/;
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const phoneRegex = /^[0-9]{10,15}$/;

  if (!nameRegex.test(name)) {
    alert('–Ü–º‚Äô—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏');
    return false;
  }
  if (!nameRegex.test(surname)) {
    alert('–ü—Ä—ñ–∑–≤–∏—â–µ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏');
    return false;
  }
  if (!emailRegex.test(email)) {
    alert('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email');
    return false;
  }
  if (!phoneRegex.test(phoneNumber)) {
    alert('–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 10 –¥–æ 15 —Ü–∏—Ñ—Ä');
    return false;
  }
  return true;
};

const ManagerDashboard = () => {
    const navigate = useNavigate();
    const [orders, setOrders] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const recordsPerPage = 50;
    const [totalOrdersCount, setTotalOrdersCount] = useState(0);
    
    const [drivers, setDrivers] = useState([]);
    const [vehicles, setVehicles] = useState([]);
    const [selectedVehicle, setSelectedVehicle] = useState(null);
    const [activeSection, setActiveSection] = useState('orders');
    const [searchTerm, setSearchTerm] = useState('');
    const [showAddForm, setShowAddForm] = useState(false);
    const [newDriver, setNewDriver] = useState({ name: '', surname: '', email: '', phoneNumber: '' });
    const [payments, setPayments] = useState([]);
    const [paymentPage, setPaymentPage] = useState(1);
    const [totalPaymentPages, setTotalPaymentPages] = useState(1);

    const handleLogout = () => {
        localStorage.clear();
        navigate('/login');
  };

  useEffect(() => {
    axios.get('http://localhost:5000/orders/count')
    .then(res => setTotalOrdersCount(res.data.total))
    .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å:', err));

    if (activeSection === 'orders') {
        axios.get(`http://localhost:5000/orders?page=${currentPage}&limit=${recordsPerPage}`)
        .then(res => {
            setOrders(res.data.orders);
            setTotalPages(Math.ceil(res.data.totalCount / recordsPerPage));
        })
    .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', err));

    } else if (activeSection === 'drivers') {
      axios.get('http://localhost:5000/drivers')
        .then(res => setDrivers(res.data))
        .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ–¥—ñ—ó–≤:', err));
    } else if (activeSection === 'vehicles') {
      axios.get('http://localhost:5000/vehicles')
        .then(res => setVehicles(res.data))
        .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤—Ç–æ–ø–∞—Ä–∫—É:', err));
    } else if (activeSection === 'payments') {
        axios.get(`http://localhost:5000/payments?page=${paymentPage}&limit=${recordsPerPage}`)
          .then(res => {
            setPayments(res.data.payments); // payments from Flask
            setTotalPaymentPages(Math.ceil(res.data.total / recordsPerPage)); // total from Flask
          })
          .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–ª–∞—Ç:', err));
      }
      
  }, [activeSection, currentPage, paymentPage]);;

  const handleAddDriver = (e) => {
    e.preventDefault();
    if (!validateDriver(newDriver)) return;

    axios.post('http://localhost:5000/drivers', newDriver)
      .then(() => {
        setNewDriver({ name: '', surname: '', email: '', phoneNumber: '' });
        setShowAddForm(false);
        return axios.get('http://localhost:5000/drivers');
      })
      .then(res => setDrivers(res.data))
      .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è:', err));
  };

  return (
    <div className="dashboard-container">
      <aside className="sidebar">
        <div className="logo">TransWay</div>
        <ul className="menu">
          <li className={activeSection === 'orders' ? 'active' : ''} onClick={() => setActiveSection('orders')}>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</li>
          <li className={activeSection === 'drivers' ? 'active' : ''} onClick={() => setActiveSection('drivers')}>–í–æ–¥—ñ—ó</li>
          <li className={activeSection === 'vehicles' ? 'active' : ''} onClick={() => setActiveSection('vehicles')}>–ê–≤—Ç–æ–ø–∞—Ä–∫</li>
          <li className={activeSection === 'payments' ? 'active' : ''} onClick={() => setActiveSection('payments')}>–û–ø–ª–∞—Ç–∏</li>
          <li className={activeSection === 'export' ? 'active' : ''} onClick={() => setActiveSection('export')}>–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</li>
        </ul>
        <button className="logout-button" onClick={handleLogout}>
          <img src="https://www.svgrepo.com/show/532551/logout-1.svg" alt="logout" className="logout-icon" />
          Logout
        </button>
      </aside>

      <main className="main-content">
      
        <h1>–ü—Ä–∏–≤—ñ—Ç, –ú–µ–Ω–µ–¥–∂–µ—Ä–µ üëã</h1>
        {/* –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
        {activeSection === 'export' && (
        <ExportData availableTables={['Orders', 'Drivers', 'Vehicles', 'Payments']} />
        )}

        {activeSection === 'orders' && (
          <>
            <div className="cards">
              <div className="card"><p>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å</p><strong>{totalOrdersCount}</strong></div>
              <div className="card"><p>Completed</p><strong>‚Äì</strong></div>
              <div className="card"><p>In Progress</p><strong>‚Äì</strong></div>
            </div>
            <div className="table-section">
              <div className="table-header">
                <h2>–£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
                <input type="text" placeholder="–ü–æ—à—É–∫..." />
              </div>
              <div className="table-scroll">
                <table>
                  <thead>
                    <tr>
                      <th>‚Ññ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</th><th>–ö–ª—ñ—î–Ω—Ç</th><th>–í—ñ–¥—Å—Ç–∞–Ω—å</th><th>–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏</th><th>–¶—ñ–Ω–∞</th>
                      <th>–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</th><th>–õ–æ–∫–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</th><th>–õ–æ–∫–∞—Ü—ñ—è —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</th>
                      <th>–°—Ç–∞—Ç—É—Å</th><th>–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è</th><th>–ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è</th><th>–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫</th><th>–ê–≤—Ç–æ</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orders.map((order, index) => (
                      <tr key={index}>
                        <td>{order.OrderNumber}</td><td>{order.ClientName}</td><td>{order.Distance} –∫–º</td>
                        <td>{order.DeliveryTime}</td><td>{order.Price}‚Ç¥</td><td>{formatDate(order.OrderDate)}</td>
                        <td>{order.UploadLocation}</td><td>{order.DownloadLocation}</td><td>{order.StatusName}</td>
                        <td>{formatDate(order.StartTime)}</td><td>{formatDate(order.EndTime)}</td>
                        <td>{order.EmployeeName || '‚Äî'}</td><td>{order.LicensePlate || '‚Äî'}</td>
                      </tr>
                    ))}
                    {orders.length === 0 && (<tr><td colSpan="13">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.</td></tr>)}
                  </tbody>
                </table>
              </div>
              <div className="pagination">
                {/* –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ */}
                <button
                    className={currentPage === 1 ? 'active' : ''}
                    onClick={() => setCurrentPage(1)}
                >
                    1
                </button>

                {/* ... –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ */}
                {currentPage > 4 && <span className="dots">...</span>}

                {/* –ü–æ—Ç–æ—á–Ω–µ "–≤—ñ–∫–Ω–æ" */}
                {Array.from({ length: totalPages }, (_, i) => i + 1)
                    .filter(
                    page =>
                        page !== 1 &&
                        page !== totalPages &&
                        page >= currentPage - 2 &&
                        page <= currentPage + 2
                    )
                    .map(page => (
                    <button
                        key={page}
                        className={currentPage === page ? 'active' : ''}
                        onClick={() => setCurrentPage(page)}
                    >
                        {page}
                    </button>
                    ))}

                {/* ... –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é */}
                {currentPage < totalPages - 3 && <span className="dots">...</span>}

                {/* –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ */}
                {totalPages > 1 && (
                    <button
                    className={currentPage === totalPages ? 'active' : ''}
                    onClick={() => setCurrentPage(totalPages)}
                    >
                    {totalPages}
                    </button>
                )}
            </div>
        </div>
        </>
    )}

        {/* –í–æ–¥—ñ—ó */}
        {activeSection === 'drivers' && (
          <div className="drivers-section">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <h2>–í–æ–¥—ñ—ó</h2>
              <div className="driver-controls">
                <input
                  type="text"
                  placeholder="–ü–æ—à—É–∫..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="search-input"
                />
                <button onClick={() => setShowAddForm(!showAddForm)} className="add-button">+ –î–æ–¥–∞—Ç–∏ –≤–æ–¥—ñ—è</button>
              </div>
            </div>

            {showAddForm && (
              <div className="modal-overlay">
                <div className="modal-card">
                  <h3>–ù–æ–≤–∏–π –≤–æ–¥—ñ–π</h3>
                  <form className="add-driver-form" onSubmit={handleAddDriver}>
                    <input type="text" placeholder="–Ü–º‚Äô—è" value={newDriver.name} onChange={(e) => setNewDriver({ ...newDriver, name: e.target.value })} required />
                    <input type="text" placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ" value={newDriver.surname} onChange={(e) => setNewDriver({ ...newDriver, surname: e.target.value })} required />
                    <input type="email" placeholder="Email" value={newDriver.email} onChange={(e) => setNewDriver({ ...newDriver, email: e.target.value })} required />
                    <input type="text" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" value={newDriver.phoneNumber} onChange={(e) => setNewDriver({ ...newDriver, phoneNumber: e.target.value })} required />
                    <div className="button-row">
                      <button type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
                      <button type="button" onClick={() => setShowAddForm(false)} className="cancel-button">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                    </div>
                  </form>
                </div>
              </div>
            )}

            <div className="driver-cards">
              {drivers
                .filter(d => `${d.Surname} ${d.Name}`.toLowerCase().includes(searchTerm.toLowerCase()))
                .map((d, index) => (
                  <div className="driver-card" key={index}>
                    <img src={`https://i.pravatar.cc/150?img=${index + 10}`} alt="avatar" className="driver-avatar" />
                    <h3>{d.Surname} {d.Name}</h3>
                    <p>üìß {d.Email}</p>
                    <p>üìû {d.PhoneNumber}</p>
                  </div>
                ))}
              {drivers.length === 0 && <p>–í–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.</p>}
            </div>
          </div>
        )}

        {/* –ê–≤—Ç–æ–ø–∞—Ä–∫ */}
        {activeSection === 'vehicles' && (
          <div className="vehicles-section">
            <h2>–ê–≤—Ç–æ–ø–∞—Ä–∫</h2>
            <div className="vehicle-cards">
              {vehicles.map((v, i) => (
                <div key={i} className="vehicle-card">
                  <h3>{v.LicensePlate}</h3>
                  <p><strong>{v.BrandName}</strong> {v.Model} ({v.ReleaseYear})</p>
                  <p>{v.VehicleStatus}</p>
                  <div style={{ textAlign: 'right' }}>
                    <button className="details-button" onClick={() => setSelectedVehicle(v)}>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</button>
                  </div>
                </div>
              ))}
              {vehicles.length === 0 && <p>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.</p>}
            </div>

            {selectedVehicle && (
              <div className="modal-overlay">
                <div className="modal-card">
                  <h3>{selectedVehicle.LicensePlate} ‚Äî {selectedVehicle.BrandName} {selectedVehicle.Model}</h3>
                  <p><strong>üîß VIN:</strong> {selectedVehicle.VinNumber}</p>
                    <p><strong>üìç –ü—Ä–æ–±—ñ–≥:</strong> {selectedVehicle.Mileage} –∫–º</p>
                    <p><strong>üìÖ –†—ñ–∫:</strong> {selectedVehicle.ReleaseYear}</p>
                    <p><strong>üöö –¢–∏–ø:</strong> {selectedVehicle.VehicleTypeName}</p>
                    <p><strong>üìä –°—Ç–∞—Ç—É—Å:</strong> {selectedVehicle.VehicleStatus}</p>
                    <p><strong>üé® –ö–æ–ª—ñ—Ä:</strong> {selectedVehicle.ColorName}</p>
                    <p><strong>üì¶ –û–± º—î–º:</strong> {selectedVehicle.Volume}–º¬≥</p>
                    <p><strong>‚öñÔ∏è –í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å:</strong> {selectedVehicle.PayloadCapacity} –∫–≥</p>
                    <p><strong>‚õΩ –í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ:</strong> {selectedVehicle.FuelExpense} –ª/100–∫–º</p>
                    <p><strong>üõ¢Ô∏è –¢–∏–ø –ø–∞–ª—å–Ω–æ–≥–æ:</strong> {selectedVehicle.FuelTypeName}</p>
                    <p><strong>‚öôÔ∏è –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á:</strong> {selectedVehicle.GearboxTypeName}</p>

                  <div className="button-row">
                    <button className='cancel-button' type="button" onClick={() => setSelectedVehicle(null)}>–ó–∞–∫—Ä–∏—Ç–∏</button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
        {activeSection === 'payments' && (
            <div className="table-section">
                <div className="table-header">
                <h2>–£—Å—ñ –æ–ø–ª–∞—Ç–∏</h2>
                </div>
                <div className="table-scroll">
                <table>
                    <thead>
                    <tr>
                        <th>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</th>
                        <th>–î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏</th>
                        <th>–°—É–º–∞</th>
                        <th>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏</th>
                        <th>–ö–ª—ñ—î–Ω—Ç</th>
                    </tr>
                    </thead>
                    <tbody>
                    {payments.map((p, i) => (
                        <tr key={i}>
                        <td>{p.OrderNumber}</td>
                        <td>{formatDate(p.PaymentDate)}</td>
                        <td>{p.Amount} ‚Ç¥</td>
                        <td>{p.PaymentMethodName}</td>
                        <td>{p.ClientName}</td>
                        </tr>
                    ))}
                    {payments.length === 0 && (
                        <tr><td colSpan="5">–û–ø–ª–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.</td></tr>
                    )}
                    </tbody>
                </table>
                </div>

                {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
                <div className="pagination">
  {/* –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ */}
  <button
    className={paymentPage === 1 ? 'active' : ''}
    onClick={() => setPaymentPage(1)}
  >
    1
  </button>

  {/* ... –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ */}
  {paymentPage > 4 && <span className="dots">...</span>}

  {/* –ü–æ—Ç–æ—á–Ω–µ "–≤—ñ–∫–Ω–æ" */}
  {Array.from({ length: totalPaymentPages }, (_, i) => i + 1)
    .filter(
      page =>
        page !== 1 &&
        page !== totalPaymentPages &&
        page >= paymentPage - 2 &&
        page <= paymentPage + 2
    )
    .map(page => (
      <button
        key={page}
        className={paymentPage === page ? 'active' : ''}
        onClick={() => setPaymentPage(page)}
      >
        {page}
      </button>
    ))}

  {/* ... –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é */}
  {paymentPage < totalPaymentPages - 3 && <span className="dots">...</span>}

  {/* –û—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ */}
  {totalPaymentPages > 1 && (
    <button
      className={paymentPage === totalPaymentPages ? 'active' : ''}
      onClick={() => setPaymentPage(totalPaymentPages)}
    >
      {totalPaymentPages}
    </button>
  )}
</div>

            </div>
            )}

      </main>
    </div>
  );
};

export default ManagerDashboard;
